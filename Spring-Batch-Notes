
NOTE : All the information below is available in the book " The Definitive guide is spring batch in detail " its a fantastic book by Micahel Minella , and i recommend 
you getting it . I am just making some quick reference notes while i read his wonderful book and learn by Spring Batch.

What is a Batch Job ?

According to " The Definitive Guide to Spring Batch " By Michael Minella , the batch job is a collection of states and transitions one to the next.
and Spring Batch is nothing more than a state machine, since steps are most common form of state used in Spring Batch.

What are the different types of Steps ?

There are two main kinds of steps
1. Tasklet Step
2. Chunk Based Step

A tasklet Steps is the implementation of Tasklet and runs its execute method over and over again within the scope of transaction, until the execute method tells the step to stop , each call to execute
method gets its own transaction. its commonly used to for things like running a stored procedure, sending notifications and so on.

A Chunk Based Step is more for Item based processing , it HAS UPTO three parts
1.ItemReader
2.ItemProcessor
3.ItemWriter

HAS UPTO here means that in some instances you need not have ItemProcessor , you can just have item reader and item writer like in the case of data migration.

What are the Interfaces that make up a Batch Job ?

Inteface                                                         Description
org.springframework.batch.core.Job                          The object representing the job , as configured within the ApplicationContext
org.springframework.batch.core.Step                         Like the job , represents the step that has been configured
org.springframework.batch.code.step.tasklet.Tasklet         A strategy interface that provides the ability to execute logic within the scope of a transaction
org.springframework.batch.item.ItemReader<T>                A strategy interface for providing input for a step
org.springframework.batch.item.ItemProcessor<I,O>           A facility to apply bussiness logic , validation ,etc , to an individual item as provided
org.springframework.batch.item.ItemWriter<T>                A strategy interface for persistence of items within a step



How does a spring batch job get executed ?


When a job is executed a number of components interact to provide the resiliency that Spring batch provides.

One such component is the JobRepository , the JobRepository is responsible for maintaining the state of the job as well as processing metrics . Typically backed by 
a relational database , this component is virtually shared by all the main components in spring batch

Next is Job Launcher , the Job Launcher is responsible for the execution of the batch Job , its is responsible for a wide varity of things other than calling the 
Job.execute , which can include things like validating that restarting the job is valid , how to execute a job , validating parameters etc

Once a Job is launcher , the Job Executes each Step and as each step is executed the current state is updated in the JobRepository


What are Job, Job Instance , Job Execution  ?

A Job Instance is a logical execution of a spring batch job , it is identified by job name and unique set of parameters.

A Job Execution is a physical execution of the Spring batch job , Everytime you launch a job , you'll get a new Job Execution, you might not get a job instance ,
when you run the job for the first time you will get job instance as well as job execution , but if the execution fails and you restart , you will not get a new instance 
but you will get a new JobExecution to trak the second physical run. So one job instance can have multiple job executions.

What is a Step Execution ?

A Step Execution is a physical execution of a step.


